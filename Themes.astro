---
export type Theme = 'light' | 'dark'

export interface Props {
  defaultTheme?: Theme
}

const { defaultTheme = 'light' } = Astro.props as Props
---

<script type="module" define:vars={{ defaultTheme }}>
  const STORAGE_KEY = 'theme'

  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)')

  function getThemePreference() {
    return prefersDark.matches ? 'dark' : null
  }

  function resolveTheme(setting) {
    const storageValue =
      setting !== undefined ? setting : localStorage.getItem(STORAGE_KEY)

    return storageValue || getThemePreference() || defaultTheme
  }

  function writeTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme)
    document.documentElement.style.colorScheme = theme
  }

  function handleStorageChange(e) {
    if (e.key !== STORAGE_KEY) return
    writeTheme(resolveTheme(e.newValue))
  }

  function handlePreferenceChange() {
    writeTheme(resolveTheme())
  }

  function set(theme) {
    localStorage.setItem(STORAGE_KEY, theme)
    writeTheme(theme)
  }

  function get() {
    const setting = localStorage.getItem(STORAGE_KEY)

    return {
      setting,
      theme: resolveTheme(setting),
    }
  }

  window.theme = {
    get,
    set,
  }

  window.addEventListener('storage', handleStorageChange)
  prefersDark.addEventListener('change', handlePreferenceChange)
  writeTheme(resolveTheme())
</script>
